# aicli/bootstrap.py
# aicli: A command-line interface for interacting with AI models.
# Copyright (C) 2025 David

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

"""
Handles the first-run setup and ensures the application's file
structure is in place before execution.
"""

import getpass
import sys

from . import config
from . import personas as persona_manager
from .logger import log


def _prompt_for_api_keys():
    """Securely prompts the user for API keys and returns them."""
    print("\n--- API Key Setup ---")
    print("You can get your keys from the following links:")
    print("  - OpenAI: https://platform.openai.com/api-keys")
    print("  - Gemini: https://aistudio.google.com/app/apikey")
    print("Press Enter to skip a key if you do not have one.")
    print("Your input will be hidden for security.")

    try:
        openai_key = getpass.getpass("Enter your OpenAI API key: ")
        gemini_key = getpass.getpass("Enter your Google Gemini API key: ")
        return openai_key.strip(), gemini_key.strip()
    except (KeyboardInterrupt, EOFError):
        print("\n\nAPI key entry cancelled. A blank .env file will be created.")
        return "", ""


def _create_dotenv_file(openai_key: str, gemini_key: str):
    """Creates the .env file with the provided API keys."""
    env_content = (
        "# This file was generated by aicli's first-run setup.\n"
        "# This file should not be committed to version control.\n\n"
        f'OPENAI_API_KEY="{openai_key}"\n'
        f'GEMINI_API_KEY="{gemini_key}"\n'
    )
    try:
        config.DOTENV_FILE.write_text(env_content, encoding="utf-8")
        log.info("Successfully created .env file at %s", config.DOTENV_FILE)
        print(f"--> API keys saved to: {config.DOTENV_FILE}")
    except OSError as e:
        log.error("Failed to write .env file: %s", e)
        print(
            f"Error: Could not write the .env file to {config.DOTENV_FILE}: {e}",
            file=sys.stderr,
        )
        sys.exit(1)


def _perform_first_run_setup():
    """Guides the user through the initial setup process."""
    print("--- Welcome to aicli! ---")
    print("This appears to be your first time running the application.")
    print("To get started, we need to create a few directories.")

    required_dirs = [
        config.CONFIG_DIR,
        config.DATA_DIR,
        config.LOG_DIRECTORY,
        config.IMAGE_DIRECTORY,
        config.SESSIONS_DIRECTORY,
        config.PERSONAS_DIRECTORY,
    ]

    print("\nThe following directories will be created:")
    for path in required_dirs:
        print(f"  - {path}")

    try:
        confirm = (
            input("\nDo you want to proceed with the setup? (Y/n): ").lower().strip()
        )
        if confirm not in ["", "y", "yes"]:
            print("Setup aborted by user. Exiting.")
            sys.exit(0)

        print("\n--> Creating directories...")
        for path in required_dirs:
            path.mkdir(parents=True, exist_ok=True)
            log.info("Ensured directory exists: %s", path)
        print("--> Directories created successfully.")

        openai_key, gemini_key = _prompt_for_api_keys()
        _create_dotenv_file(openai_key, gemini_key)

        print("\n--> Creating default 'aicli_assistant' persona...")
        persona_manager.create_default_persona_if_missing()
        print("--> Default persona created successfully.")

        print("\n--- Setup Complete! ---")
        print(
            "You can now start using aicli. For a list of commands, run `aicli chat` and type `/help`."
        )

    except (KeyboardInterrupt, EOFError):
        print("\n\nSetup aborted by user. Exiting.")
        sys.exit(0)
    except OSError as e:
        log.critical(
            "Failed to create necessary directories during first-run setup: %s", e
        )
        print(
            f"\nError: A critical error occurred while creating directories: {e}",
            file=sys.stderr,
        )
        print(
            "Please check your file system permissions and try again.", file=sys.stderr
        )
        sys.exit(1)


def ensure_project_structure():
    """
    Ensures all necessary directories and default files exist.
    Triggers a guided first-run setup if the main config directory is missing.
    """
    if not config.CONFIG_DIR.exists():
        _perform_first_run_setup()
    else:
        # This is not a first run, but we should still ensure everything is in place.
        required_dirs = [
            config.CONFIG_DIR,
            config.DATA_DIR,
            config.LOG_DIRECTORY,
            config.IMAGE_DIRECTORY,
            config.SESSIONS_DIRECTORY,
            config.PERSONAS_DIRECTORY,
        ]
        try:
            for path in required_dirs:
                if not path.exists():
                    log.info("Directory %s not found, creating it.", path)
                    path.mkdir(parents=True, exist_ok=True)

            persona_manager.create_default_persona_if_missing()

            if not config.DOTENV_FILE.exists():
                log.warning(".env file not found. Creating an empty one.")
                _create_dotenv_file("", "")

        except OSError as e:
            log.critical("Failed to verify or create project structure: %s", e)
            print(
                f"Error: Could not create a necessary file or directory: {e}",
                file=sys.stderr,
            )
            print("Please check your file system permissions.", file=sys.stderr)
            sys.exit(1)
